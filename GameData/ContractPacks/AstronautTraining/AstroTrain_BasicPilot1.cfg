CONTRACT_TYPE
{
	name = AstroTrain_BasicSinglePilot
	title = Basic Single Pilot Training
	genericTitle = Basic Single Pilot Training
	group = BasicAstronautTraining
	description = One of your pilots could use some training. We can help.
	genericDescription = One of your pilots could use some training. We can help.
	synopsis = Give a pilot basic training.
	completedMessage = Congratulations! Your pilot has learned a lot from their instructor, and has advanced a level.
	agent = Kerbin Spaceflight School
	
	maxSimultaneous = 1
	minExpiry = 1.0
	maxExpiry = 10.0
	prestige = Trivial
	
	rewardScience = @/scienceCost * -1
	rewardReputation = 0.0
	rewardFunds = 0
	failureReputation = 0
	failureFunds = 0
	advanceFunds = @/fundsCost * -1
	
	DATA
	{
		type = List<Kerbal>
		potentialStudents = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() < 5 && k.Type() == Crew && k.RosterStatus() == Available)
		hidden = true
	}
	
	DATA
	{
		type = Kerbal
		uniquenessCheck = CONTRACT_ACTIVE
		student = @/potentialStudents.SelectUnique()
		hidden = true
	}
	
	DATA
	{
		type = int
		studentLevel = @/student.ExperienceLevel()
		nextLevel = @/studentLevel + 1
	}
	
	DATA
	{
		type = double
		XPAward = @nextLevel == 5 ? 32 : @nextLevel == 4 ? 16 : @nextLevel == 3 ? 8 : @nextLevel == 2 ? 6 : 2
	}
	
	DATA
	{
		type = double
		fundsCost = @/XPAward * 1000 / ContractMultiplier()
	}
	
	DATA
	{
		type = float
		scienceCost = @/XPAward * 5 / ContractMultiplier()
	}
	
	DATA
	{
		type = List<Kerbal>
		potentialInstructors = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() > @/studentLevel && k.Type() == Crew && k.RosterStatus() == Available)
		hidden = true
	}
	
	DATA
	{
		type = double
		kerbinDuration = @/XPAward * 30 * 3600
		LKODuration = @/XPAward * 20 * 3600
		moonDuration = @/XPAward * 5 * 3600
		moonOrbitDuration = @/XPAward * 10 * 3600
	}
	
	PARAMETER
	{
		name = PotentialStations
		type = Any
		title = Take @/student and an instructor to a Base or Station in the Kerbin system
		
		PARAMETER
		{
			name = KerbinBase
			type = All
			title = Complete all of the following at a Base on Kerbin
			
			PARAMETER
			{
				name = BaseCheck_Kerbin
				type = VesselIsType
				vesselType = Base
			}
			
			PARAMETER
			{
				name = LandedCheck_Kerbin
				type = ReachState
				targetBody = Kerbin
				situation = LANDED
			}
			
			PARAMETER
			{
				name = PartCheck_Kerbin
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_Kerbin
				type = HasCrew
				kerbal = @/student
			}
			
			PARAMETER
			{
				name = InstructorCheck_Kerbin
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_Kerbin
				type = Duration
				duration = Duration(@/kerbinDuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
		
		PARAMETER
		{
			name = KerbinStation
			type = All
			title = Complete all of the following at a Station in orbit of Kerbin
			
			PARAMETER
			{
				name = StationCheck_Kerbin
				type = VesselIsType
				vesselType = Station
			}
			
			PARAMETER
			{
				name = OrbitCheck_Kerbin
				type = ReachState
				targetBody = Kerbin
				situation = ORBITING
			}
			
			PARAMETER
			{
				name = PartCheck_LKO
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_LKO
				type = HasCrew
				kerbal = @/student
			}
			
			PARAMETER
			{
				name = InstructorCheck_LKO
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_LKO
				type = Duration
				duration = Duration(@/LKODuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
		
		PARAMETER
		{
			name = MoonStation
			type = All
			title = Complete all of the following at a Station in orbit of the Mun or Minmus
			
			PARAMETER
			{
				name = StationCheck_Moon
				type = VesselIsType
				vesselType = Station
			}
			
			PARAMETER
			{
				name = OrbitCheck_Moon
				type = ReachState
				targetBody = Mun
				targetBody = Minmus
				situation = ORBITING
			}
			
			PARAMETER
			{
				name = PartCheck_MoonOrbit
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_MoonOrbit
				type = HasCrew
				kerbal = @/student
			}
			
			PARAMETER
			{
				name = InstructorCheck_MoonOrbit
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_Moon
				type = Duration
				duration = Duration(@/moonOrbitDuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
		
		PARAMETER
		{
			name = MoonBase
			type = All
			title = Complete all of the following at a Base on the Mun or Minmus
			
			PARAMETER
			{
				name = BaseCheck_Moon
				type = VesselIsType
				vesselType = Base
			}
			
			PARAMETER
			{
				name = LandedCheck_Moon
				type = ReachState
				targetBody = Mun
				targetBody = Minmus
				situation = LANDED
			}
			
			PARAMETER
			{
				name = PartCheck_Moon
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_Moon
				type = HasCrew
				kerbal = @/student
			}
			
			PARAMETER
			{
				name = InstructorCheck_Moon
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_Moon
				type = Duration
				duration = Duration(@/moonDuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
	}
	
	BEHAVIOUR
	{
		name = LevelUpStudent
		type = AwardExperience
		kerbal = @/student
		experience = @/XPAward
		awardImmediately = true
	}
	
	REQUIREMENT
	{
		name = QualifiedInstructors
		type = Expression
		expression = @/potentialInstructors.Count() > 0
		title = Must have a qualified instructor available
	}
	
	REQUIREMENT
	{
		name = QualifiedStudents
		type = Expression
		expression = @/potentialStudents.Count() > 0
		title = Must have a qualifying student available
	}
	
	REQUIREMENT
	{
		name = ScienceCheck
		type = Science
		minScience = scienceCost
		title = Must have at least @/scienceCost science points
	}
	
	REQUIREMENT
	{
		name = UpgradedAstronautComplex
		type = Facility
		facility = AstronautComplex
		minLevel = 3
		title = Must have a level 3 Astronaut Complex
	}
	
	REQUIREMENT
	{
		name = UpgradedRandD
		type = Facility
		facility = ResearchAndDevelopment
		minLevel = 2
		title = Must have a level 2 Research and Development facility
	}
	
	REQUIREMENT
	{
		name = ScienceLabCheck
		type = PartModuleUnlocked
		partModule = ModuleScienceLab
		title = Must have unlocked the science lab
	}
	
}