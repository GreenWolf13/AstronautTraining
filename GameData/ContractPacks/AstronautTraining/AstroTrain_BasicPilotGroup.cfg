CONTRACT_TYPE
{
	name = AstroTrain_BasicGroupPilot
	title = Basic Group Pilot Training
	genericTitle = Basic Group Pilot Training
	group = BasicAstronautTraining
	description = Some of your pilots could use some training. We can help.
	genericDescription = Some of your pilots could use some training. We can help.
	synopsis = Give @/students.Count() pilots basic training.
	completedMessage = Congratulations! Your pilots have learned a lot from their instructor, and have advanced a level.
	agent = Kerbin Spaceflight School
	
	maxSimultaneous = 1
	minExpiry = 1.0
	maxExpiry = 10.0
	prestige = Significant
	
	rewardScience = @/scienceCost * -1
	rewardReputation = 0.0
	rewardFunds = 0
	failureReputation = 0
	failureFunds = 0
	advanceFunds = @/fundsCost * -1
	
	DATA
	{
		type = List<Kerbal>
		requiredValue = false
		potentialStudents0 = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() == 0 && k.Type() == Crew && k.RosterStatus() == Available)
		potentialStudents1 = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() == 1 && k.Type() == Crew && k.RosterStatus() == Available)
		potentialStudents2 = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() == 2 && k.Type() == Crew && k.RosterStatus() == Available)
		potentialStudents3 = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() == 3 && k.Type() == Crew && k.RosterStatus() == Available)
		potentialStudents4 = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() == 4 && k.Type() == Crew && k.RosterStatus() == Available)
	}
	
	DATA
	{
		type = int
		studentLevel = @/potentialStudents0.Count() >= 2 ? 0 : @/potentialStudents1.Count() >= 2 ? 1 : @/potentialStudents2.Count() >= 2 ? 2 : @/potentialStudents3.Count() >= 2 ? 3 : 4
		nextLevel = @/studentLevel + 1
	}
	
	DATA
	{
		type = List<Kerbal>
		requiredValue = false
		students = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() == @/studentLevel && k.Type() == Crew && k.RosterStatus() == Available).Random(2, 6)
	}
	
	DATA
	{
		type = double
		XPAward = @nextLevel == 5 ? 32 : @nextLevel == 4 ? 16 : @nextLevel == 3 ? 8 : @nextLevel == 2 ? 6 : 2
	}
	
	DATA
	{
		type = double
		fundsCost = @/XPAward * 1000 / ContractMultiplier()
	}
	
	DATA
	{
		type = float
		scienceCost = @/XPAward * 5 * @/students.Count() / ContractMultiplier()
	}
	
	DATA
	{
		type = List<Kerbal>
		requiredValue = false
		potentialInstructors = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.ExperienceLevel() > @/studentLevel && k.Type() == Crew && k.RosterStatus() == Available)
	}
	
	DATA
	{
		type = double
		kerbinDuration = @/XPAward * 30 * 3600
		LKODuration = @/XPAward * 20 * 3600
		moonDuration = @/XPAward * 5 * 3600
		moonOrbitDuration = @/XPAward * 10 * 3600
	}
	
	PARAMETER
	{
		name = PotentialStations
		type = Any
		title = Take @/students and an instructor to a Base or Station in the Kerbin system
		
		PARAMETER
		{
			name = KerbinBase
			type = All
			title = Complete all of the following at a Base on Kerbin
			
			PARAMETER
			{
				name = BaseCheck_Kerbin
				type = VesselIsType
				vesselType = Base
			}
			
			PARAMETER
			{
				name = LandedCheck_Kerbin
				type = ReachState
				targetBody = Kerbin
				situation = LANDED
			}
			
			PARAMETER
			{
				name = PartCheck_Kerbin
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_Kerbin
				type = HasCrew
				kerbal = @/students
			}
			
			PARAMETER
			{
				name = InstructorCheck_Kerbin
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_Kerbin
				type = Duration
				duration = Duration(@/kerbinDuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
		
		PARAMETER
		{
			name = KerbinStation
			type = All
			title = Complete all of the following at a Station in orbit of Kerbin
			
			PARAMETER
			{
				name = StationCheck_Kerbin
				type = VesselIsType
				vesselType = Station
			}
			
			PARAMETER
			{
				name = OrbitCheck_Kerbin
				type = ReachState
				targetBody = Kerbin
				situation = ORBITING
			}
			
			PARAMETER
			{
				name = PartCheck_LKO
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_LKO
				type = HasCrew
				kerbal = @/students
			}
			
			PARAMETER
			{
				name = InstructorCheck_LKO
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_LKO
				type = Duration
				duration = Duration(@/LKODuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
		
		PARAMETER
		{
			name = MoonStation
			type = All
			title = Complete all of the following at a Station in orbit of the Mun or Minmus
			
			PARAMETER
			{
				name = StationCheck_Moon
				type = VesselIsType
				vesselType = Station
			}
			
			PARAMETER
			{
				name = OrbitCheck_Moon
				type = ReachState
				targetBody = Mun
				targetBody = Minmus
				situation = ORBITING
			}
			
			PARAMETER
			{
				name = PartCheck_MoonOrbit
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_MoonOrbit
				type = HasCrew
				kerbal = @/students
			}
			
			PARAMETER
			{
				name = InstructorCheck_MoonOrbit
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_Moon
				type = Duration
				duration = Duration(@/moonOrbitDuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
		
		PARAMETER
		{
			name = MoonBase
			type = All
			title = Complete all of the following at a Base on the Mun or Minmus
			
			PARAMETER
			{
				name = BaseCheck_Moon
				type = VesselIsType
				vesselType = Base
			}
			
			PARAMETER
			{
				name = LandedCheck_Moon
				type = ReachState
				targetBody = Mun
				targetBody = Minmus
				situation = LANDED
			}
			
			PARAMETER
			{
				name = PartCheck_Moon
				type = PartValidation
				partModule = ModuleScienceLab
			}
			
			PARAMETER
			{
				name = StudentCheck_Moon
				type = HasCrew
				kerbal = @/students
			}
			
			PARAMETER
			{
				name = InstructorCheck_Moon
				type = HasCrew
				trait = Pilot
				minExperience = @/nextLevel
			}
			
			PARAMETER
			{
				name = DurationCheck_Moon
				type = Duration
				duration = Duration(@/moonDuration)
				preWaitText = Training time required
				waitingText = Training time remaining
				completionText = Training complete
			}
		}
	}
	
	BEHAVIOUR
	{
		name = LevelUpStudent
		type = AwardExperience
		kerbal = @/students
		experience = @/XPAward
		awardImmediately = true
	}
	
	REQUIREMENT
	{
		name = QualifiedInstructors
		type = Expression
		expression = @/potentialInstructors.Count() > 0
		title = Must have a qualified instructor available
	}
	
	REQUIREMENT
	{
		name = QualifiedStudents
		type = Expression
		expression = @/potentialStudents0.Count() >= 2 || @/potentialStudents1.Count() >= 2 || @/potentialStudents2.Count() >= 2 || @/potentialStudents3.Count() >= 2 || @/potentialStudents4.Count() >= 2
		title = Must have several qualifying students available
	}
	
	REQUIREMENT
	{
		name = ScienceCheck
		type = Science
		minScience = scienceCost
		title = Must have at least @/scienceCost science points
	}
	
	REQUIREMENT
	{
		name = UpgradedAstronautComplex
		type = Facility
		facility = AstronautComplex
		minLevel = 3
		title = Must have a level 3 Astronaut Complex
	}
	
	REQUIREMENT
	{
		name = UpgradedRandD
		type = Facility
		facility = ResearchAndDevelopment
		minLevel = 2
		title = Must have a level 2 Research and Development facility
	}
	
	REQUIREMENT
	{
		name = ScienceLabCheck
		type = PartModuleUnlocked
		partModule = ModuleScienceLab
		title = Must have unlocked the science lab
	}
	
}